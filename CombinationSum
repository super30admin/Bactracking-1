//TimeComplexity. 2^m*n
//SpaceComplexity. 2^m*n

class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        result = new ArrayList<>();

        helper(candidates,0,target,new ArrayList<>());
        return result;
    }

    private void helper(int[] candidates,int p, int target,List<Integer> path){

        //base
        if(target == 0){
            result.add(new ArrayList<>(path));
            return;
        }

        if(target < 0 )return;

        //logic
      
      for(int i = p; i < candidates.length; i++){

        path.add(candidates[i]);
        helper(candidates,i, target - candidates[i], path);
        path.remove(path.size()-1);
      }


       
    }
}
