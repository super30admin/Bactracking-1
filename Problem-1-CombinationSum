class Solution {
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        if(candidates == null || candidates.length == 0) return result;
        helper(candidates,target,0,new ArrayList<>(), result);
        return result;
    }
    
    public void helper(int[] candidates, int target, int index , List<Integer> path, List<List<Integer>> result)
    {
        //base case
        if(target < 0) return;
        if(target == 0)
        {
            result.add(new ArrayList<>(path));
            return;
        }
        
         //logic
        for(int i = index ; i < candidates.length ; i++)
        {
            List<Integer> temp = new ArrayList<>(path);
            temp.add(candidates[i]);
            helper(candidates, target - candidates[i] , i , temp, result);
            //path.remove(path.size() - 1);
        }
         

    }
    
}
