Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.

Note that operands in the returned expressions should not contain leading zeros.

 

Example 1:

Input: num = "123", target = 6
Output: ["1*2*3","1+2+3"]
Explanation: Both "1*2*3" and "1+2+3" evaluate to 6.
Example 2:

Input: num = "232", target = 8
Output: ["2*3+2","2+3*2"]
Explanation: Both "2*3+2" and "2+3*2" evaluate to 8.
Example 3:

Input: num = "3456237490", target = 9191
Output: []
Explanation: There are no expressions that can be created from "3456237490" to evaluate to 9191.

------------------------------------------------

Solution 1 - 
TC - O(n * 4 ^ n) as we have 4 path(+, -, *, /)
SC - O(n * 4 ^ n)


class Solution {
    List<String> result;
    public List<String> addOperators(String num, int target) {
        result = new ArrayList<>();
        helper(num, target, 0, "", 0, 0);
        return result;
    }
    
    public void helper(String num, int target, int index, String path, long calc, long tail)
    {
        // base case
        if(index == num.length())
        {
            if(calc == target)
            {
                result.add(path);
                return;
            }
        }
        
        for(int i = index; i < num.length(); i++)
        {
            if(index != i && num.charAt(index) == '0') continue;
            long curr = Long.parseLong(num.substring(index, i + 1));
            if(index == 0)
            {
                helper(num, target, i + 1, path + curr, calc + curr, curr);
            }
            else
            {
                // +
                helper(num, target, i + 1, path + "+" + curr, calc + curr, curr);
                
                // -
                helper(num, target, i + 1, path + "-" + curr, calc - curr, -curr);
                
                // *
                helper(num, target, i + 1, path + "*" + curr, calc - tail + curr * tail, curr * tail);
            }
        }
    }
}
