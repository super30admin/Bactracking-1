// Time Compleity o(n^2) space compleity o(n^2)
class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        result = new ArrayList<>();
        List<Integer> path = new ArrayList<Integer>();
        helper(candidates,0,target,path);
        return result;
    }
    public void helper(int[] candidates,int pivot, int target,List<Integer> path){
       if(target == 0){
           result.add(new ArrayList<>(path));
           return;
       }
       if(target < 0) return;

       for(int i=pivot ; i<candidates.length;i++){
           path.add(candidates[i]);
           helper(candidates,i,target-candidates[i],path);
           path.remove(path.size()-1);
       }
    }
}