//https://leetcode.com/problems/combination-sum/
//tc-exponential
//sc-exponential
//backtrack
class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        result = new ArrayList<>();
        
        //null case
        if(candidates == null || candidates.length ==0) return result;
        
        helper(candidates , target , 0,new ArrayList<>());
        return result;
    }
    private void helper(int[] candidates,int target,int index,List<Integer> path)
    {
        //base
        if(target ==0)
        {
            result.add(new ArrayList<>(path));
            return;
        }
        if(index == candidates.length || target<0)
        {
            return;
        }
        //logic 
        
        //do not choose
        helper(candidates , target , index+1,path);
        
        //choose 
        path.add(candidates[index]);
        helper(candidates , target-candidates[index],index,path);
        //backtrack
        path.remove(path.size()-1);
    }
}


//tc-exponential
//sc-exponential
//for loop backtrack

class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        result = new ArrayList<>();
        
        //null case
        if(candidates == null || candidates.length ==0) return result;
        helper(candidates , target , 0,new ArrayList<>());
        return result;
    }
    private void helper(int[] candidates,int target,int index,List<Integer> path)
    {
        //base
        if(target == 0)
        {
            result.add(new ArrayList<>(path));
            return;
        }
        if(target<0)
        {
            return;
        }
        //logic
        
        for(int i =index;i<candidates.length;i++){
            //action
            path.add(candidates[i]);
            //recurse
            helper(candidates , target - candidates[i] , i , path);
            //backtrack
            path.remove(path.size()-1);
        }
    }
}