/** 
*Time complexity : 2^n
*Space : O(n)
*/
class Solution {
    List<List<Integer>> result=new ArrayList();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        
        if(candidates==null || candidates.length==0) return result;
        helper(candidates,0,target,new ArrayList());
        return result;
        
    }
    private void helper(int[] candidates, int index,int target,List<Integer> path){
        //base
        if( index==candidates.length || target<0) return;
        if(target==0){
            result.add(new ArrayList(path));
            return;
        }
        
        //logic
        //dont choose case
        helper(candidates,index+1,target,path);
        
        //choose case
        path.add(candidates[index]);
        helper(candidates,index,target-candidates[index],path);
        
        path.remove(path.size()-1);
        
        
    }
}
