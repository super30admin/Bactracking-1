// Time Compleity o(n^2) space compleity o(n^2)
class Solution {
    List<String> result;
    public List<String> addOperators(String num, int target) {
        result = new ArrayList<>();
        helper(num,target,0,0,0,new StringBuilder());
        return result;
    }
    public void helper(String num, int target, int pivot, long calc, long tail, StringBuilder path){
        // base
        if(num.length() == pivot){
            if(calc==target) result.add(new String(path.toString()));

            return;
        }

        //logic
        for(int i=pivot;i<num.length();i++){
            if(num.charAt(pivot)=='0' && i!=pivot) continue;
            long curr = Long.parseLong(num.substring(pivot,i+1));
            int l = path.length();
            if(pivot==0){
                path.append(curr);
                helper(num,target,i+1,curr,curr,path);
                path.setLength(l);
            }
            else{
                path.append('+');
                path.append(curr);
                helper(num,target,i+1,calc+curr,curr,path);
                path.setLength(l);

                path.append('-');
                path.append(curr);
                helper(num,target,i+1,calc-curr,-curr,path);
                path.setLength(l);

                path.append('*');
                path.append(curr);
                helper(num,target,i+1,calc-tail+tail*curr,tail*curr,path);
                path.setLength(l);
            }
        }
    }
}