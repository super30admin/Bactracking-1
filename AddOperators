
// Time Complexity : O(n4^n) where n is the length of num.
// Space Complexity : O(n) where n is the length of num.
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : yes

class Solution {
    List<String> res;
    public List<String> addOperators(String num, int target) {
        res = new ArrayList<>();
        if(num == null || num.length() == 0){
            return res;
        }
        helper(num, 0, new StringBuilder(), 0, 0, target);
        return res;
    }
    private void helper(String num, int index, StringBuilder sb, long calc, long tail, int target){
        //base
        if(index == num.length()){
            if(target == calc){
                res.add(sb.toString());
                return;
            }
        }
        
        //logic
        for(int i=index; i<num.length(); i++){
            if(i != index && num.charAt(index) == '0'){
                continue;
            }
            long cur = Long.parseLong(num.substring(index, i+1));
            int len = sb.length();
            if(index==0){
                sb.append(cur);
                helper(num, i+1, sb, cur, cur, target);
                sb.setLength(len);
            }else{
                //+
                sb.append("+");
                sb.append(cur);
                helper(num, i+1, sb, calc+cur, cur, target);
                sb.setLength(len);
                //-
                sb.append("-");
                sb.append(cur);
                helper(num, i+1, sb, calc-cur, -cur, target);
                sb.setLength(len);
                //*
                sb.append("*");
                sb.append(cur);
                helper(num, i+1, sb, calc-tail + (tail*cur), tail*cur, target);
                sb.setLength(len);
            }
        }
    }
}