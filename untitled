class Solution {
public:
    vector<vector<int>> answer;
    
    void dfs(vector<int> candidates, int index, int target, vector<int>& path){
        if(target <0 ){
            return;
        }
        
        if(target==0){
            answer.push_back(path);
           return;
        }
        
//         dfs(candidates,index+1,target,path);
//         path.push_back(candidates[index]);
//         dfs(candidates,index,target - candidates[index],path);
//         path.pop_back();
        
        for(int i = index ; i<candidates.size(); i++){
            path.push_back(candidates[i]);
            dfs(candidates,index,target-candidates[i],path);
            path.pop_back();
        }
        
    }
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        if(candidates.size()== 0){
            return { };
        }
        
        
        vector<int> path;
        
        dfs(candidates, 0, target, path);
    return answer;
    }
    
};

